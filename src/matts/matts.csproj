<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <RootNamespace>matts</RootNamespace>
    <AssemblyName>matts</AssemblyName>
    <TargetFramework>net7.0</TargetFramework>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
    <SpaRoot>ClientApp\</SpaRoot>
    <SpaProxyServerUrl>https://localhost:44475</SpaProxyServerUrl>
    <SpaProxyLaunchCommand>npm start</SpaProxyLaunchCommand>
    <ImplicitUsings>enable</ImplicitUsings>
    <UserSecretsId>c13e403c-9bf7-4f22-91f7-c7ee13c4397f</UserSecretsId>
	<IsDockerBuild>false</IsDockerBuild>
	<EnableNETAnalyzers>true</EnableNETAnalyzers>
	<NoWarn>VSTHRD200</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Identity" />
    <PackageReference Include="Azure.Storage.Blobs" />
    <PackageReference Include="BCrypt.Net-Next"  />
    <PackageReference Include="FluentValidation"/>
    <PackageReference Include="Ical.Net"  />
    <PackageReference Include="JorgeSerrano.Json.JsonSnakeCaseNamingPolicy" />
    <PackageReference Include="Mapster"  />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy"  />
    <PackageReference Include="Microsoft.Azure.AppConfiguration.AspNetCore" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" />
    <PackageReference Include="Microsoft.Extensions.Azure" />
    <PackageReference Include="Neo4j.Driver" />
    <PackageReference Include="Nerdbank.Streams" />
    <PackageReference Include="Roslynator.Analyzers" >
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Roslynator.CSharp"  />
    <PackageReference Include="Roslynator.Formatting.Analyzers" >
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <!-- Allow the unit tests project to access internal members for testing purposes. -->
  <ItemGroup>
    <AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
      <_Parameter1>$(AssemblyName).Tests</_Parameter1>
    </AssemblyAttribute>
	<AssemblyAttribute Include="System.Runtime.CompilerServices.InternalsVisibleTo">
	  <_Parameter1>DynamicProxyGenAssembly2</_Parameter1>
	</AssemblyAttribute>
  </ItemGroup>

  <ItemGroup>
    <!-- Don't publish the SPA source files, but do show them in the project files list -->
    <Compile Remove="matts.AzFunctions\**" />
    <Compile Remove="matts.Tests\**" />
    <Content Remove="$(SpaRoot)**" />
    <Content Remove="matts.Tests\**" />
    <EmbeddedResource Remove="matts.Tests\**" />
	<Content Remove="matts.AzFunctions\**" />
	<EmbeddedResource Remove="matts.AzFunctions\**" />
    <None Remove="$(SpaRoot)**" />
    <None Remove="matts.AzFunctions\**" />
    <None Remove="matts.Tests\**" />
    <None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And '$(IsDockerBuild)' == 'false' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
  </Target>
  
  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm install" Condition=" '$(IsDockerBuild)' == 'false' " />
    <Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --configuration production" Condition=" '$(IsDockerBuild)' == 'false' " />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaRoot)dist\**; $(SpaRoot)dist-server\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>wwwroot\%(RecursiveDir)%(FileName)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>
