@use 'sass:map';
@use '@angular/material' as mat;
@use '@material/theme/theme-color' as mdc-theme-color;
@use '../../../theming.scss';

// this block copied from: https://github.com/angular/components/blob/main/src/material/button/_icon-button-theme.scss
@mixin _ripple-color($color) {
  --mat-mdc-button-persistent-ripple-color: #{$color};
  --mat-mdc-button-ripple-color: #{rgba($color, 0.1)};
}
@function _variable-safe-contrast-tone($value, $is-dark) {
  @if ($value == 'dark' or $value == 'light' or type-of($value) == 'color') {
    @return mdc-theme-color.contrast-tone($value);
  }

  @return if($is-dark, 'light', 'dark');
}
$config: mat.get-color-config(theming.$theme);
$background-palette: map.get($config, background);
$surface: mat.get-color-from-palette($background-palette, card);
$is-dark: map.get($config, is-dark);
$on-surface: if(_variable-safe-contrast-tone($surface, $is-dark) == 'dark', #000, #fff);

$primary-palette: map.get($config, 'primary');
$hover-color: mat.get-color-from-palette($primary-palette, lighter);

button {
  &:not(.mat-button-disabled):hover {
    background-color: $hover-color;
  }

  &.mat-button-disabled {
    @include _ripple-color($on-surface);
    background-color: var(--mat-mdc-button-ripple-color);
  }
}
