# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: matthews-ats-staging

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:
    name: Build and Test
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub container registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Build Secrets
        id: build-secrets
        run: |
          secrets_get=(stagingn4juser stagingn4jpw)
          for secret_get in ${secrets_get[@]}
          do
            value=$(az keyvault secret show --name $secret_get --vault-name matthews-ats-vault --query value --output tsv)
            echo "::add-mask::$value"
            echo "$secret_get=$value" >> $GITHUB_OUTPUT
          done

      - name: Configure Docker Compose
        env:
          NEO4J_USERNAME: ${{ steps.build-secrets.outputs.stagingn4juser }}
          NEO4J_PASSWORD: ${{ steps.build-secrets.outputs.stagingn4jpw }}
        run: |
          cat - > docker.staging.env <<EOF
          NEO4J_USERNAME=$NEO4J_USERNAME
          NEO4J_PASSWORD=$NEO4J_PASSWORD
          EOF

      - name: Build Image
        run: docker compose --env-file docker.staging.env -f docker-compose.yml -f docker-compose.staging.yml build

      - name: Run Frontend Tests
        run: |
          docker build --target test-node .
          docker create --name node-tests $(docker images --filter "label=test=node" --format "{{.ID}}")
          docker cp node-tests:/ClientApp/testresults ./testresults-node
          docker rm node-tests

      - name: Run Backend Tests
        run: |
          docker build --target test .
          docker create --name dotnet-tests $(docker images --filter "label=test=dotnet" --format "{{.ID}}")
          docker cp dotnet-tests:/testresults ./testresults
          docker rm dotnet-tests

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          compare_to_earlier_commit: false
          files: |
            testresults-node/**/*.xml
            testresults/**/*.trx
      
      - name: Tag Images
        run: |
          docker tag ghcr.io/m-flak/matts ghcr.io/${{ env.REPO }}:${{ github.sha }}
          docker tag ghcr.io/m-flak/matts-database ghcr.io/${{ env.REPO }}-database:${{ github.sha }}

      - name: Push images to GitHub container Registry
        run: docker compose --env-file docker.staging.env -f docker-compose.yml -f docker-compose.staging.yml push

  deploy:
    name: Deploy to Azure
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Staging'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
